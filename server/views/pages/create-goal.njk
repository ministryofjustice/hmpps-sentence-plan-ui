{% extends "../partials/layout.njk" %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/warning-text/macro.njk" import govukWarningText %}
{% from "moj/components/side-navigation/macro.njk" import mojSideNavigation %}
{% from "moj/components/date-picker/macro.njk" import mojDatePicker %}
{% from "../components/error-summary/error-summary.njk" import errorSummary %}

{% set locale = interpolate(locale, {
    areaOfNeed: data.selectedAreaOfNeed.name,
    dateOptions: {
        threeMonths: data.dateOptions[0] | formatSimpleDate,
        sixMonths: data.dateOptions[1] | formatSimpleDate,
        twelveMonths: data.dateOptions[2] | formatSimpleDate
    }
}) %}

{% block pageTitle %}
    {% if not errors %}
        {{ locale.page.title }}
    {% else %}
        {{ locale.page.errorTitle }}
    {% endif %}
{% endblock %}

{% set mainClasses = "app-container govuk-body" %}

{% block head %}
    {{ super() }}
    <style nonce="{{ cspNonce }}">
        :root {
            --autocomplete-menu-content: "{{ locale.goalSelection.autocompleteHint }}";
        }
    </style>
{% endblock %}

{% block content %}
    {{ super() }}
    <a href="{{ data.returnLink }}" class="govuk-back-link">{{ locale.common.backLink.text }}</a>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-one-third">
            {% set areaOfNeedNavigationLinks = [] %}
            {% for areaOfNeed in data.areasOfNeed %}
                {% set isActive = areaOfNeed.name === data.selectedAreaOfNeed.name %}
                {% set areaOfNeedNavigationLinks = areaOfNeedNavigationLinks.concat({
                    text: areaOfNeed.name,
                    href: areaOfNeed.url,
                    active: isActive
                }) %}
            {% endfor %}

            {{ mojSideNavigation({
              label: 'Side navigation',
              items: areaOfNeedNavigationLinks
            }) }}
        </div>
        <div class="govuk-grid-column-two-thirds">
            {{ errorSummary({
                errors: errors,
                locale: locale
            }) }}

          {% if data.assessmentDetailsForArea == null %}
              {# Assessment API failure #}
              {{ govukWarningText({
                text: locale.common.assessmentInfo.assessmentUnavailable,
                iconFallbackText: "Warning"
              }) }}
          {% elseif data.assessmentDetailsForArea.isAssessmentSectionComplete == false  %}
              {{ govukWarningText({
                text: locale.common.assessmentInfo.assessmentIncomplete,
                iconFallbackText: "Warning"
              }) }}
          {% endif %}

          <details class="govuk-details">
            <summary class="govuk-details__summary">
              <span class="govuk-details__summary-text">
                {{ locale.common.assessmentInfo.detailsSummary }}
              </span>
            </summary>
            <div class="govuk-details__text">
              {% if data.assessmentDetailsForArea != null %}
                {% set missingInformation = [] %}

                {# linked to serious harm section #}
                {%- if data.assessmentDetailsForArea.linkedToHarm == 'YES' -%}
                  <p><strong>This area is linked to RoSH (risk of serious harm)</strong></p>
                {%- elseif data.assessmentDetailsForArea.linkedToHarm == 'NO' -%}
                  <p><strong>This area is not linked to RoSH (risk of serious harm)</strong></p>
                {%- else -%}
                  {% set missingInformation = missingInformation.concat('linkedToHarm') -%}
                {%- endif -%}
                <p class="govuk-body">{{ data.assessmentDetailsForArea.riskOfSeriousHarmDetails }}</p>

                {# linked to reoffending section #}
                {%- if data.assessmentDetailsForArea.linkedtoReoffending == 'YES' -%}
                  <p><strong>This area is linked to risk of reoffending</strong></p>
                {%- elseif data.assessmentDetailsForArea.linkedtoReoffending == 'NO' -%}
                  <p><strong>This area is not linked to risk of reoffending</strong></p>
                {%- else -%}
                  {% set missingInformation = missingInformation.concat('linkedToReoffending') -%}
                {%- endif -%}
                <p class="govuk-body">{{ data.assessmentDetailsForArea.riskOfReoffendingDetails }}</p>

                {# motivation section #}
                {%- if data.assessmentDetailsForArea.motivationToMakeChanges != undefined %}
                  <p><strong>Motivation to make changes in this area</strong></p>
                  <p class="govuk-body">{{ locale.common.assessmentInfo.motivationText[data.assessmentDetailsForArea.motivationToMakeChanges] }}</p>
                {%- elseif data.assessmentDetailsForArea.isAssessmentSectionComplete == false %}
                  {# We only add motivation to the Missing Information section if the section is not complete #}
                  {%- set missingInformation = missingInformation.concat('motivationToMakeChanges') %}
                {%- endif %}

                {# linked to strengths section #}
                {%- if data.assessmentDetailsForArea.linkedtoStrengthsOrProtectiveFactors == 'YES' -%}
                  <p><strong>There are strengths or protective factors related to this area</strong></p>
                {%- elseif data.assessmentDetailsForArea.linkedtoStrengthsOrProtectiveFactors == 'NO' -%}
                  <p><strong>There are no strengths or protective factors related to this area</strong></p>
                {%- else -%}
                    {% set missingInformation = missingInformation.concat('linkedtoStrengthsOrProtectiveFactors') %}
                {%- endif -%}
                <p class="govuk-body">{{ data.assessmentDetailsForArea.strengthsOrProtectiveFactorsDetails }}</p>

                {# list out the missing information #}
                {% if missingInformation.length > 0 %}
                  <p><strong>{{ locale.common.assessmentInfo.missingInformation }}</strong></p>
                  <p class="govuk-body">
                    <ul>
                    {% for info in missingInformation %}
                      <li>{{ locale.common.assessmentInfo.missingInformationList[info] }}</li>
                    {% endfor %}
                    </ul>
                  </p>
                {% endif %}
              {% endif %}
            </div>
          </details>

            <span class="govuk-caption-l">{{ locale.mainHeading.caption }}</span>
            <h1 class="govuk-heading-l">{{ locale.mainHeading.title }}</h1>

            <form id="create-goal-form" method="POST">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}">
                <input type="hidden" id="_areaOfNeed" value="{{ data.selectedAreaOfNeed.url }}">
                <input type="hidden" name="area-of-need" value="{{ data.selectedAreaOfNeed.name }}">
                <input type="hidden" id="page" value="goals">

                {{ govukInput({
                    label: {
                        text: locale.goalSelection.label,
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: locale.goalSelection.hint
                    },
                    formGroup: {
                        classes: "goal-input-autocomplete-wrapper"
                    },
                    errorMessage: getFormattedError(errors, locale, 'goal-input-autocomplete'),
                    id: "goal-input",
                    name: "goal-input-autocomplete",
                    value: data.form['goal-input-autocomplete']
                }) }}

                {% set relatedAreaOfNeedCheckboxes = [] %}
                {% for areaOfNeed in data.sortedAreasOfNeed %}
                    {% if areaOfNeed.name != data.selectedAreaOfNeed.name %}
                        {% set isChecked = data.form['related-area-of-need'] and (areaOfNeed.name in data.form['related-area-of-need']) %}
                        {% set relatedAreaOfNeedCheckboxes = relatedAreaOfNeedCheckboxes.concat({
                            value: areaOfNeed.name,
                            text: areaOfNeed.name,
                            checked: isChecked
                        }) %}
                    {% endif %}
                {% endfor %}

                {% set areasOfNeedHtml %}
                    {{ govukCheckboxes({
                        name: "related-area-of-need",
                        hint: {
                            text: locale.relatedAreaOfNeed.hint
                        },
                        errorMessage: getFormattedError(errors, locale, "related-area-of-need"),
                        items: relatedAreaOfNeedCheckboxes
                    }) }}
                {% endset -%}

                {{ govukRadios({
                    name: "related-area-of-need-radio",
                    fieldset: {
                        legend: {
                            text: locale.relatedAreaOfNeed.label,
                            classes: "govuk-fieldset__legend--m"
                        }
                    },
                    errorMessage: getFormattedError(errors, locale, 'related-area-of-need-radio'),
                    items: [
                        {
                            text: locale.relatedAreaOfNeed.options.yes,
                            value: "yes",
                            checked: data.form['related-area-of-need-radio'] == 'yes',
                            conditional: {
                                html: areasOfNeedHtml
                            }
                        },
                        {
                            text: locale.relatedAreaOfNeed.options.no,
                            value: "no",
                            checked: data.form['related-area-of-need-radio'] == 'no'
                        }
                      ]
                }) }}

              {# START HERE #}
              {% set customDateHtml %}
                    {{ mojDatePicker({
                        id: "date-selection-custom",
                        name: "date-selection-custom",
                        errorMessage: getFormattedError(errors, locale, 'date-selection-custom'),
                        classes: "govuk-input--width-10",
                        hint: {
                            text: locale.common.goalEditing.datePicker.hint
                        },
                        label: {
                            text: locale.common.goalEditing.datePicker.label,
                            classes: "govuk-fieldset__legend--s"
                        },
                        value: data.form['date-selection-custom'],
                        minDate: data.minimumDatePickerDate
                    }) }}
                {% endset -%}

                {% set customDateRadioHtml %}
                    {{ govukRadios({
                        name: "date-selection-radio",
                        fieldset: {
                            legend: {
                                text: locale.common.goalEditing.dateSelection.label,
                                classes: "govuk-fieldset__legend--m"
                            }
                        },
                        hint: {
                            text: locale.common.goalEditing.dateSelection.hint
                        },
                        errorMessage: getFormattedError(errors, locale, 'date-selection-radio'),
                        value: data.form['date-selection-radio'],
                        items: [
                            {
                                value: data.dateOptions[0] | formatISODate,
                                text: locale.common.goalEditing.dateSelection.options.threeMonths
                            },
                            {
                                value: data.dateOptions[1] | formatISODate,
                                text: locale.common.goalEditing.dateSelection.options.sixMonths
                            },
                            {
                                value: data.dateOptions[2] | formatISODate,
                                text: locale.common.goalEditing.dateSelection.options.twelveMonths
                            },
                            {
                                divider: locale.common.radio.divider
                            },
                            {
                                value: "custom",
                                text: locale.common.goalEditing.dateSelection.options.custom,
                                conditional: {
                                    html: customDateHtml
                                }
                            }
                        ]
                    }) }}
                {% endset -%}

                {{ govukRadios({
                    name: "start-working-goal-radio",
                    fieldset: {
                        legend: {
                            text: locale.common.goalEditing.startWorking.label,
                            classes: "govuk-fieldset__legend--m"
                        }
                    },
                    errorMessage: getFormattedError(errors, locale, 'start-working-goal-radio'),
                    items: [
                        {
                            text: locale.common.goalEditing.startWorking.options.yes,
                            value: "yes",
                            checked: data.form['start-working-goal-radio'] == 'yes',
                            conditional: {
                                html: customDateRadioHtml
                            }
                        },
                        {
                            text: locale.common.goalEditing.startWorking.options.no,
                            value: "no",
                            checked: data.form['start-working-goal-radio'] == 'no'
                        }
                      ]
                }) }}

                <div class="govuk-button-group">
                    {{ govukButton({
                        text: locale.addStepsButton,
                        name: "action",
                        value: "addStep"
                    }) }}
                    {{ govukButton({
                        text: locale.saveWithoutStepsButton,
                        name: "action",
                        value: "saveWithoutSteps",
                        classes: "govuk-button--secondary"
                    }) }}
                </div>
              {# END HERE, buttons need to be a parameter #}
            </form>
        </div>
    </div>
{% endblock %}
