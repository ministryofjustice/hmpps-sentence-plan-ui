{% extends "../partials/layout.njk" %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "hmpps/components/date-picker/macro.njk" import hmppsDatePicker %}
{% from "moj/components/side-navigation/macro.njk" import mojSideNavigation %}
{% from "../components/error-summary/error-summary.njk" import errorSummary %}

{% set locale = interpolate(locale, {
    areaOfNeed: data.selectedAreaOfNeed.name,
    dateOptions: {
        threeMonths: data.dateOptions[0] | formatSimpleDate,
        sixMonths: data.dateOptions[1] | formatSimpleDate,
        twelveMonths: data.dateOptions[2] | formatSimpleDate,
        endOfSentence: data.dateOptions[3] | formatSimpleDate,
        nextMeeting: data.dateOptions[4] | formatSimpleDate
    }
}) %}

{% set pageTitle %}
    {% if errors %}
        {{ locale.page.errorTitle }}
    {% else %}
        {{ locale.page.title }}
    {% endif %}
{% endset -%}

{% set mainClasses = "app-container govuk-body" %}

{# Setup arrays and custom HTML #}

{% set areaOfNeedNavigationLinks = [] %}
{% for areaOfNeed in data.areasOfNeed %}
    {% set isActive = areaOfNeed.name === data.selectedAreaOfNeed.name %}
    {% set areaOfNeedNavigationLinks = areaOfNeedNavigationLinks.concat({
        text: areaOfNeed.name,
        href: areaOfNeed.url,
        active: isActive
    }) %}
{% endfor %}

{% set relatedAreaOfNeedCheckboxes = [] %}
{% for areaOfNeed in data.sortedAreasOfNeed %}
    {% if areaOfNeed.name != data.selectedAreaOfNeed.name %}
        {% set isChecked = data.form['related-area-of-need'] and (areaOfNeed.name in data.form['related-area-of-need']) %}
        {% set relatedAreaOfNeedCheckboxes = relatedAreaOfNeedCheckboxes.concat({
            value: areaOfNeed.name,
            text: areaOfNeed.name,
            checked: isChecked
        }) %}
    {% endif %}
{% endfor %}

{% set areasOfNeedHtml %}
    {{ govukCheckboxes({
      name: "related-area-of-need",
      hint: {
        text: locale.relatedAreaOfNeed.hint
      },
      errorMessage: getFormattedError(errors, locale, "related-area-of-need"),
      items: relatedAreaOfNeedCheckboxes
    }) }}
{% endset -%}

{% set customDateHtml %}
    {{ hmppsDatePicker({
        id: "date-selection-custom",
        name: "date-selection-custom",
        errorMessage: getFormattedError(errors, locale, 'date-selection-custom'),
        classes: "govuk-input--width-10",
        hint: {
            text: locale.datePicker.hint
        },
        label: {
            text: locale.datePicker.label,
            classes: "govuk-fieldset__legend--s"
        },
        value: data.form['date-selection-custom'],
        minDate: data.minimumDatePickerDate
    }) }}
{% endset -%}

{% set customDateRadioHtml %}
    {{ govukRadios({
        name: "date-selection-radio",
        fieldset: {
            legend: {
                text: locale.dateSelection.label,
                classes: "govuk-fieldset__legend--m"
            }
        },
        hint: {
            text: locale.dateSelection.hint
        },
        errorMessage: getFormattedError(errors, locale, 'date-selection-radio'),
        value: data.form['date-selection-radio'],
        items: [
            {
                value: data.dateOptions[4] | formatISODate,
                text: locale.dateSelection.options.nextMeeting,
                checked: data.form['date-selection-radio'] == data.dateOptions[4] | formatISODate
            },
            {
                value: data.dateOptions[0] | formatISODate,
                text: locale.dateSelection.options.threeMonths
            },
            {
                value: data.dateOptions[1] | formatISODate,
                text: locale.dateSelection.options.sixMonths
            },
            {
                value: data.dateOptions[2] | formatISODate,
                text: locale.dateSelection.options.twelveMonths
            },
            {
                value: data.dateOptions[3] | formatISODate,
                text: locale.dateSelection.options.twentyFourMonths
            },
            {
                divider: locale.common.radio.divider
            },
            {
                value: "custom",
                text: locale.dateSelection.options.custom,
                conditional: {
                    html: customDateHtml
                }
            }
        ]
    }) }}
{% endset -%}

{% block content %}
    <a href="#" class="govuk-back-link">{{ locale.common.backLink.text }}</a>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-one-third">
            {{ mojSideNavigation({
              label: 'Side navigation',
              items: areaOfNeedNavigationLinks
            }) }}
        </div>
        <div class="govuk-grid-column-two-thirds">
            {{ errorSummary({
                errors: errors,
                locale: locale
            }) }}

            <span class="govuk-caption-l">{{ locale.mainHeading.caption }}</span>
            <h1 class="govuk-heading-l">{{ locale.mainHeading.title }}</h1>

            <form id="create-goal-form" method="POST">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}">
                <input type="hidden" id="_areaOfNeed" value="{{ data.selectedAreaOfNeed.url }}">
                <input type="hidden" name="area-of-need" value="{{ data.selectedAreaOfNeed.name }}">
                <input type="hidden" id="page" value="goals">

                {{ govukInput({
                    label: {
                        text: locale.goalSelection.label,
                        classes: "govuk-label--m"
                    },
                    hint: {
                        text: locale.goalSelection.hint
                    },
                    formGroup: {
                        classes: "goal-input-autocomplete-wrapper"
                    },
                    errorMessage: getFormattedError(errors, locale, 'goal-input-autocomplete'),
                    id: "goal-input",
                    name: "goal-input-autocomplete",
                    value: data.form['goal-input-autocomplete']
                }) }}

                {{ govukRadios({
                    name: "related-area-of-need-radio",
                    fieldset: {
                        legend: {
                            text: locale.relatedAreaOfNeed.label,
                            classes: "govuk-fieldset__legend--m"
                        }
                    },
                    errorMessage: getFormattedError(errors, locale, 'related-area-of-need-radio'),
                    items: [
                        {
                            text: locale.relatedAreaOfNeed.options.yes,
                            value: "yes",
                            checked: data.form['related-area-of-need-radio'] == 'yes',
                            conditional: {
                                html: areasOfNeedHtml
                            }
                        },
                        {
                            text: locale.relatedAreaOfNeed.options.no,
                            value: "no",
                            checked: data.form['related-area-of-need-radio'] == 'no'
                        }
                      ]
                }) }}

                {{ govukRadios({
                    name: "start-working-goal-radio",
                    fieldset: {
                        legend: {
                            text: locale.startWorking.label,
                            classes: "govuk-fieldset__legend--m"
                        }
                    },
                    errorMessage: getFormattedError(errors, locale, 'start-working-goal-radio'),
                    items: [
                        {
                            text: locale.startWorking.options.yes,
                            value: "yes",
                            checked: data.form['start-working-goal-radio'] == 'yes',
                            conditional: {
                                html: customDateRadioHtml
                            }
                        },
                        {
                            text: locale.startWorking.options.no,
                            value: "no",
                            checked: data.form['start-working-goal-radio'] == 'no'
                        }
                      ]
                }) }}

                <div class="govuk-button-group">
                    {{ govukButton({
                        text: locale.addStepsButton,
                        name: "action",
                        value: "addStep"
                    }) }}
                    {{ govukButton({
                        text: locale.saveWithoutStepsButton,
                        name: "action",
                        value: "saveWithoutSteps",
                        classes: "govuk-button--secondary"
                    }) }}
                </div>
            </form>
        </div>
    </div>
{% endblock %}